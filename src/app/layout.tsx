"use client";
// import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import Navbar from "@/components/Navbar";
import React, { useState } from "react";
import { contractABI, contractAddress } from "@/utils/constants";
import Web3 from "web3";
import { connectToContract, contract } from "@/utils/connectToContract";
import { MetaMaskInpageProvider } from "@metamask/providers";
import { Provider, useDispatch, useSelector } from "react-redux";
import {store} from '../store/store'
import { updateAccountAddress,updateBalance, updateStatus } from "@/slice/accountSlice.ts";
import { getBalance } from "@/utils/getBalance";
import { getStatus } from "@/utils/getStatus";
const inter = Inter({ subsets: ["latin"] });
declare global {
  interface Window{
    ethereum?:MetaMaskInpageProvider
  }
}
// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

function Component(){
  const[isAccountChanged,setIsAccountChanged]=useState(true);

  const account=useSelector((state:any)=>state.account);
  const balance=useSelector((state:any)=>state.balance);
  const accountExist=useSelector((state:any)=>state.status);
  const dispatch=useDispatch();
    // async function getBalance(){
    //   try{
    //     let result = await contract.methods.getBalance().call({ from: account });
    //     if(result==='0')
    //       dispatch(updateBalance('-9987654321'))
  
  
    //     dispatch(updateBalance(result))
  
    //     // setBalance('-9987654321');
    //     // setBalance(result);
    //   }
    //   catch(error:any)
    //   {
    //     dispatch(updateBalance(''))
    //     // setBalance("");
    //     console.log(error);
    //   }
    // };
  if(account){
    if(window.ethereum)
     window.ethereum.on("accountsChanged", async (accounts:any) => {
      // setAccount(accounts[0])
      dispatch(updateAccountAddress(accounts[0]));

    });}
  
  
  React.useEffect(()=>{
    if(!contract)
    {
      connectToContract();
    }

    // # update balance 
    // async function setAccountStatus(){
    //   dispatch(updateStatus(await getStatus(account)))
    //   setIsAccountChanged(!isAccountChanged);
    //   }
    //   if(account){
    //   setAccountStatus();
      
    // }

  },[account])


  // React.useEffect(()=>{
  //   async function updateBalanceKey(){
  //     console.log(account);
  //     dispatch(updateBalance(await getBalance(account)));
  //   }
  //   if(account && accountExist){
  //     updateBalanceKey();
  //   }
  // },[isAccountChanged])
  return(
    <Navbar className="top-2"/>
  )
}

export default function RootLayout({
  children,
}: Readonly<{
children: React.ReactNode;
}>) {

  return (
    <Provider store={store}>
    <html lang="en">
      <body>
      <div className="relative w-full flex items-center justify-center">
     
    </div>

  
       <div className={inter.className}>
            <Component/>
            {children}  
       </div>
      

        </body>
    </html>
    </Provider>
  );
}
