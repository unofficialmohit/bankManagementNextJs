"use client";
// import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import Navbar from "@/components/Navbar";
import React, { useState } from "react";
import { contractABI, contractAddress } from "@/utils/constants";
import Web3 from "web3";
import { connectToContract, contract } from "@/utils/connectToContract";
const inter = Inter({ subsets: ["latin"] });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: Readonly<{
children: React.ReactNode;
}>) {

const[account,setAccount]=useState<string>("")
const[balance,setBalance]=useState<string>("");

  async function getBalance(){
    try{
      let result = await contract.methods.getBalance().call({ from: account });
      if(result==='0')
      setBalance('-9987654321');
      setBalance(result);
    }
    catch(error:any)
    {
      setBalance("");
      console.log(error);
    }
  };
if(account){
  if(window.ethereum)
   window.ethereum.on("accountsChanged", (accounts:any) => {
    setAccount(accounts[0])
  });}

function requestAccount(){

    if (window.ethereum) {
      // res[0] for fetching a first wallet
      window.ethereum
          .request({ method: "eth_requestAccounts" })
          .then((res: any) =>{
            setAccount(res[0]);
            console.log(res[0]);
         
           
        }
      )
      .catch
      {
        setAccount("")
      }
  } else {
      console.log("install metamask extension!!");
      return;
  }
}
React.useEffect(()=>{
  if(!contract)
  {
    connectToContract();
  }
  if(account){
  getBalance();
}
},[account])
  return (
    <html lang="en">
      <body >
      <div className="relative w-full flex items-center justify-center">
      <Navbar className="top-2" getAccount={requestAccount} account={account} balance={balance}/>
    </div>
     <div className={inter.className}>
          {children}  
     </div>
        </body>
    </html>
  );
}
